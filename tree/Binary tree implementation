package course;

class TNode{
	int data;//class variable--accessible to all the methods within the class name
	TNode left;
	TNode right;
	
	TNode(int data){ //argument
		this.data = data;//why here this keyword is used? becoz here ,class variable is data and argument is also data...showing difference b/w them.
		                 // this keyword points the current instance of the class.....showing difference b/w instance variable from local variable or from parameter/argument..
	}
}

class Binarytrees{
	
	TNode root;//TNode is data type like...int,float
	
	Binarytrees(int data){  //constructor
		root = new TNode(data);
	}
	
	public void insertLeft(TNode root,int data) { 
		root.left = new TNode(data);
	}
	
    public void insertRight(TNode root,int data) {
    	root.right = new TNode(data);
	}
    
    public void inOrder(TNode root) {   //inorder condition---left,root,right
    	
    	if(root==null) {
    		return;
    	}
    	else {
    	inOrder(root.left);
    	System.out.print(root.data+" ");   //println gives new line...i need all the numbers in same line ..so didnt give ln
    	inOrder(root.right);
    	}
	}
	
}

public class Binarytreeimplementation {

	public static void main(String[] args) {
		
         Binarytrees bt = new Binarytrees(1);   // 1  ...... here i give parameter 1 here..as a root node...so it is parameterised constructor 
		 
//left subtree of 1    
         bt.insertLeft(bt.root, 2); // 2 1......we need to tell the program ..2 should be placed left to root node...thats why bt.root used
         bt.insertRight(bt.root, 3);//2 1 3
         bt.insertLeft(bt.root.left,4); // 4 2 1 3.......4 should be placed left to left of the root node...thats why bt.root.left.left used
         bt.insertRight(bt.root.left,5);// 4 2 5 1 3 .......5 should be placed right to left of the root node...thats why bt.root.left.left used
         bt.insertLeft(bt.root.left.left,8); //8 4 2 5 1 3 ........ 8 should be placed left to left of left of the root node...thats why bt.root.left.left used
         bt.insertRight(bt.root.left.left,9);//8 4 9 2 5 1 3 
         bt.insertLeft(bt.root.left.right,10);//8 4 9 2 10 5 1 3 
         bt.insertRight(bt.root.left.right,11);//8 4 9 2 10 5 11 1 3 
//right sub tree of 1         
         bt.insertLeft(bt.root.right, 6); //8 4 9 2 10 5 11 1 6 3 
         // 6 should be placed left to right of the root node
         
         bt.insertRight(bt.root.right, 7); //8 4 9 2 10 5 11 1 6 3 7
         bt.insertLeft(bt.root.right.left,12); //8 4 9 2 10 5 11 1 12 6 3 7 
         bt.insertRight(bt.root.right.left,13); //8 4 9 2 10 5 11 1 12 6 13 3 7 
         bt.insertLeft(bt.root.right.right,14); //8 4 9 2 10 5 11 1 12 6 13 3 14 7 
         bt.insertRight(bt.root.right.right,15); //8 4 9 2 10 5 11 1 12 6 13 3 14 7 15

         
         
         //traversal(print the output)
            //inorder
         
         bt.inOrder(bt.root);
         
	}	
	}


